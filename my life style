<!DOCTYPE html>
<html lang="ar" dir="rtl">
<head>
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>متتبع السعرات والماكروز — 1000 أكلة (MVP)</title>
<style>
/* ===== Theme (Light / Dark - Black & White) ===== */
:root{
  --bg:#ffffff; --ink:#0a0a0a; --sub:#6b7280; --muted:#e5e7eb;
  --card:#ffffff; --brand:#000000; --ok:#16a34a; --warn:#eab308; --danger:#ef4444;
  --ring:#000; --trail:#d1d5db;
}
:root.dark{
  --bg:#000000; --ink:#f5f5f5; --sub:#9ca3af; --muted:#1f2937;
  --card:#0a0a0a; --brand:#ffffff; --ok:#22c55e; --warn:#facc15; --danger:#ef4444;
  --ring:#fff; --trail:#374151;
}
*{box-sizing:border-box}
body{margin:0;font-family:system-ui,-apple-system,Segoe UI,Roboto,Helvetica,Arial;background:var(--bg);color:var(--ink)}
.container{max-width:1000px;margin:0 auto;padding:16px}
.card{background:var(--card);border:1px solid var(--muted);border-radius:18px;padding:16px;margin:12px 0}
.row{display:flex;gap:12px;flex-wrap:wrap}
.col{flex:1 1 260px}
h1{margin:6px 0;font-size:clamp(22px,3.8vw,30px)}
h2{margin:6px 0;font-size:clamp(18px,3.2vw,24px)}
.small{font-size:13px;color:var(--sub)}
label{display:block;font-weight:700;margin:6px 0}
input,select,button{width:100%;padding:12px;border-radius:12px;border:1px solid var(--muted);font-size:16px;background:transparent;color:var(--ink)}
button{background:var(--brand);color:var(--bg);border:none;cursor:pointer;font-weight:800}
button.ghost{background:#e5e7eb;color:#111}
:root.dark button.ghost{background:#111827;color:#f3f4f6}
button.ok{background:var(--ok)}
button.warn{background:var(--warn);color:#111}
button.danger{background:var(--danger)}
button:active{transform:scale(.99)}
.toolbar{display:flex;gap:8px;flex-wrap:wrap}
nav{display:flex;gap:8px;flex-wrap:wrap;margin-bottom:10px}
nav button{flex:1 1 120px}
hr{border:none;border-top:1px dashed var(--muted);margin:12px 0}
.kpi{display:grid;grid-template-columns:repeat(4,minmax(180px,1fr));gap:12px}
.center{text-align:center}
.hidden{display:none}
.badge{display:inline-block;padding:4px 10px;border-radius:999px;border:1px solid var(--muted)}
/* Circular progress */
.ring{position:relative;width:140px;height:140px;margin:auto}
.ring svg{transform:rotate(-90deg)}
.ring .num{position:absolute;inset:0;display:flex;align-items:center;justify-content:center;font-weight:900}
.progress-grid{display:grid;grid-template-columns:repeat(4,minmax(160px,1fr));gap:12px}
/* Search list */
.suggest{display:flex;gap:6px;flex-wrap:wrap;margin-top:6px}
.tag{display:inline-block;padding:4px 10px;border-radius:999px;background:#eee;color:#111;font-size:12px;cursor:pointer}
:root.dark .tag{background:#111827;color:#f3f4f6}
.list{max-height:260px;overflow:auto;border:1px solid var(--muted);border-radius:12px}
.list-item{padding:10px;border-bottom:1px solid var(--muted);cursor:pointer}
.list-item:hover{background:rgba(0,0,0,.05)}
:root.dark .list-item:hover{background:rgba(255,255,255,.08)}
/* Table */
table{width:100%;border-collapse:collapse}
th,td{border-bottom:1px solid var(--muted);padding:8px;text-align:center}
tfoot td{font-weight:900}
/* Toggle */
.toggle{display:flex;gap:8px;align-items:center}
</style>
</head>
<body>
<div class="container">
  <div class="card">
    <div class="row" style="align-items:center">
      <div class="col" style="flex:2 1 300px">
        <h1>متتبع السعرات والماكروز — 1000 أكلة</h1>
        <div class="small">كل البيانات محفوظة محليًا — بحث ذكي مع اقتراح «هل تقصد؟» وإضافة أحجام تقديرية (جرام / طبق).</div>
      </div>
      <div class="col toggle" style="justify-content:flex-end">
        <span class="small">المظهر</span>
        <select id="themeSel" style="width:auto">
          <option value="light">أبيض</option>
          <option value="dark">أسود</option>
        </select>
      </div>
    </div>
  </div>

  <nav class="card">
    <button data-tab="home">الرئيسية</button>
    <button data-tab="add">إضافة أكل</button>
    <button data-tab="goals">الأهداف</button>
    <button data-tab="log">سجل اليوم</button>
    <button data-tab="about">عن التطبيق</button>
  </nav>

  <!-- Home -->
  <section id="home" class="card">
    <h2>لوحة التحكم</h2>
    <div class="kpi">
      <div class="card center"><div class="small">سعرات اليوم</div><div id="kcalNum" style="font-size:28px;font-weight:900">0</div><div class="small">الهدف: <span id="kcalGoal">0</span></div></div>
      <div class="card center"><div class="small">بروتين (جم)</div><div id="pNum" style="font-size:28px;font-weight:900">0</div><div class="small">الهدف: <span id="pGoal">0</span></div></div>
      <div class="card center"><div class="small">دهون (جم)</div><div id="fNum" style="font-size:28px;font-weight:900">0</div><div class="small">الهدف: <span id="fGoal">0</span></div></div>
      <div class="card center"><div class="small">كارب (جم)</div><div id="cNum" style="font-size:28px;font-weight:900">0</div><div class="small">الهدف: <span id="cGoal">0</span></div></div>
    </div>
    <hr>
    <div class="progress-grid">
      <div class="card center"><div class="small">السعرات</div><div class="ring"><svg width="140" height="140"><circle cx="70" cy="70" r="62" stroke="var(--trail)" stroke-width="12" fill="none"/><circle id="ringK" cx="70" cy="70" r="62" stroke="var(--ring)" stroke-width="12" fill="none" stroke-linecap="round" stroke-dasharray="389" stroke-dashoffset="389"/></svg><div class="num" id="ringKtxt">0%</div></div></div>
      <div class="card center"><div class="small">البروتين</div><div class="ring"><svg width="140" height="140"><circle cx="70" cy="70" r="62" stroke="var(--trail)" stroke-width="12" fill="none"/><circle id="ringP" cx="70" cy="70" r="62" stroke="var(--ring)" stroke-width="12" fill="none" stroke-linecap="round" stroke-dasharray="389" stroke-dashoffset="389"/></svg><div class="num" id="ringPtxt">0%</div></div></div>
      <div class="card center"><div class="small">الدهون</div><div class="ring"><svg width="140" height="140"><circle cx="70" cy="70" r="62" stroke="var(--trail)" stroke-width="12" fill="none"/><circle id="ringF" cx="70" cy="70" r="62" stroke="var(--ring)" stroke-width="12" fill="none" stroke-linecap="round" stroke-dasharray="389" stroke-dashoffset="389"/></svg><div class="num" id="ringFtxt">0%</div></div></div>
      <div class="card center"><div class="small">الكارب</div><div class="ring"><svg width="140" height="140"><circle cx="70" cy="70" r="62" stroke="var(--trail)" stroke-width="12" fill="none"/><circle id="ringC" cx="70" cy="70" r="62" stroke="var(--ring)" stroke-width="12" fill="none" stroke-linecap="round" stroke-dasharray="389" stroke-dashoffset="389"/></svg><div class="num" id="ringCtxt">0%</div></div></div>
    </div>
  </section>

  <!-- Add Food -->
  <section id="add" class="card hidden">
    <h2>إضافة أكل</h2>
    <div class="row">
      <div class="col">
        <label>ابحث عن الأكل</label>
        <input id="q" placeholder="مثال: رز، صدور دجاج، تفاح…" />
        <div class="small">لو فيه خطأ إملائي هنقترح عليك «هل تقصد؟»</div>
        <div id="didyou" class="suggest"></div>
        <div id="results" class="list hidden"></div>
      </div>
      <div class="col">
        <label>الحجم</label>
        <select id="serv"></select>
        <div class="small">أو أدخل بالجرام مباشرة</div>
        <input id="grams" type="number" placeholder="جرام" />
      </div>
      <div class="col">
        <label>الوجبة</label>
        <select id="meal">
          <option>فطور</option>
          <option>غداء</option>
          <option>عشاء</option>
          <option>سناك</option>
        </select>
      </div>
    </div>
    <div class="toolbar">
      <button id="addBtn">أضف للسجل</button>
      <button class="ghost" id="clearSel">تفريغ الحقول</button>
    </div>
    <hr>
    <div id="preview" class="small"></div>
  </section>

  <!-- Goals -->
  <section id="goals" class="card hidden">
    <h2>الأهداف اليومية</h2>
    <div class="row">
      <div class="col"><label>سعرات</label><input id="g_k" type="number"></div>
      <div class="col"><label>بروتين (جم)</label><input id="g_p" type="number"></div>
      <div class="col"><label>دهون (جم)</label><input id="g_f" type="number"></div>
      <div class="col"><label>كارب (جم)</label><input id="g_c" type="number"></div>
    </div>
    <div class="toolbar">
      <button id="saveGoals" class="ok">حفظ</button>
      <button id="recalc" class="ghost">اقتراح تلقائي</button>
    </div>
  </section>

  <!-- Log -->
  <section id="log" class="card hidden">
    <h2>سجل اليوم — <span id="dToday"></span></h2>
    <table>
      <thead><tr><th>وجبة</th><th>أكل</th><th>حجم (جم)</th><th>سعرات</th><th>ب</th><th>د</th><th>ك</th><th></th></tr></thead>
      <tbody id="tbody"></tbody>
      <tfoot><tr><td colspan="3">الإجمالي</td><td id="tK">0</td><td id="tP">0</td><td id="tF">0</td><td id="tC">0</td><td></td></tr></tfoot>
    </table>
    <div class="toolbar"><button id="clearToday" class="danger">مسح اليوم</button></div>
  </section>

  <section id="about" class="card hidden">
    <h2>عن التطبيق</h2>
    <p>نسخة MVP تعمل بالكامل على جهازك. قاعدة البيانات تُنشأ محليًا لتضم +1000 نوع أكلة (أسماء عربية/إنجليزية) مع قيم تقريبية لكل 100 جم. الأوزان التقديرية (طبق صغير/متوسط/كبير، ملعقة، كوب) تتحول تلقائيًا إلى جرام حسب نوع الأكل.</p>
    <p>هذه القيم للاسترشاد فقط — اضبط الأحجام يدويًا عند الحاجة.</p>
  </section>

</div>

<!-- Fuse.js للبحث الذكي -->
<script src="https://cdn.jsdelivr.net/npm/fuse.js@6.6.2"></script>
<script>
/**********************
 * Storage & Helpers  *
 **********************/
const SKEY = 'macro1000_v1';
let state = JSON.parse(localStorage.getItem(SKEY)||'{}');
function save(){ localStorage.setItem(SKEY, JSON.stringify(state)); }
function todayKey(){ return new Date().toISOString().slice(0,10); }
function getDay(){ state.days = state.days||{}; return (state.days[todayKey()] = state.days[todayKey()]||{items:[]}); }
function round(n){ return Math.round(n*10)/10; }

/**********************
 * Theme
 **********************/
const themeSel = document.getElementById('themeSel');
function applyTheme(v){ document.documentElement.classList.toggle('dark', v==='dark'); }
applyTheme(state.theme||'light');
if(state.theme) themeSel.value = state.theme; 
themeSel.onchange = ()=>{ state.theme = themeSel.value; save(); applyTheme(state.theme); };

/**********************
 * Goals (suggested)
 **********************/
function suggestGoals(){
  const w = state.weight||75; // كجم
  const kcal = Math.round(w*33); // تقديري
  const prot = Math.round(w*1.8);
  const fat = Math.round(w*0.9);
  const carb = Math.max(0, Math.round((kcal - (prot*4+fat*9))/4));
  return {kcal,prot,fat,carb};
}
state.goals = state.goals || suggestGoals();

function refreshGoalsUI(){
  const g = state.goals; 
  document.getElementById('g_k').value = g.kcal;
  document.getElementById('g_p').value = g.prot;
  document.getElementById('g_f').value = g.fat;
  document.getElementById('g_c').value = g.carb;
  document.getElementById('kcalGoal').textContent = g.kcal;
  document.getElementById('pGoal').textContent = g.prot;
  document.getElementById('fGoal').textContent = g.fat;
  document.getElementById('cGoal').textContent = g.carb;
  refreshHome();
}
refreshGoalsUI();

document.getElementById('saveGoals').onclick = ()=>{
  state.goals = {
    kcal:+document.getElementById('g_k').value,
    prot:+document.getElementById('g_p').value,
    fat:+document.getElementById('g_f').value,
    carb:+document.getElementById('g_c').value,
  }; save(); refreshGoalsUI();
};

document.getElementById('recalc').onclick = ()=>{ state.goals = suggestGoals(); save(); refreshGoalsUI(); };

/**********************
 * Food DB (1000+) — generator
 **********************/
// قاعدة أساسية لكل 100 جم (تقريبية)
const BASE = [
  {cat:'لحوم', ar:'صدر دجاج مشوي', en:'grilled chicken breast', kcal:165, p:31, f:3.6, c:0},
  {cat:'لحوم', ar:'لحم بقري قليل الدهن', en:'beef steak lean', kcal:187, p:27, f:8, c:0},
  {cat:'أسماك', ar:'سالمون', en:'salmon', kcal:208, p:20, f:13, c:0},
  {cat:'أسماك', ar:'تونة معلبة', en:'canned tuna (water)', kcal:132, p:29, f:1, c:0},
  {cat:'بيض وألبان', ar:'بيض', en:'eggs', kcal:155, p:13, f:11, c:1.1},
  {cat:'حبوب', ar:'رز أبيض مطبوخ', en:'white rice (cooked)', kcal:130, p:2.4, f:0.3, c:28.7},
  {cat:'حبوب', ar:'مكرونة مطبوخة', en:'pasta (cooked)', kcal:131, p:5, f:1.1, c:25},
  {cat:'حبوب', ar:'شوفان جاف', en:'oats (dry)', kcal:389, p:17, f:7, c:66},
  {cat:'خبز', ar:'خبز أبيض', en:'white bread', kcal:265, p:9, f:3.2, c:49},
  {cat:'بقول', ar:'حمص مسلوق', en:'chickpeas (boiled)', kcal:164, p:9, f:2.6, c:27},
  {cat:'بقول', ar:'عدس مطبوخ', en:'lentils (cooked)', kcal:116, p:9, f:0.4, c:20},
  {cat:'خضار', ar:'بروكلي', en:'broccoli', kcal:34, p:2.8, f:0.4, c:7},
  {cat:'خضار', ar:'بطاطس مسلوقة', en:'boiled potato', kcal:87, p:1.9, f:0.1, c:20},
  {cat:'فواكه', ar:'موز', en:'banana', kcal:89, p:1.1, f:0.3, c:23},
  {cat:'فواكه', ar:'تفاح', en:'apple', kcal:52, p:0.3, f:0.2, c:14},
  {cat:'دهون', ar:'زيت زيتون', en:'olive oil', kcal:884, p:0, f:100, c:0},
  {cat:'أجبان', ar:'جبن شيدر', en:'cheddar cheese', kcal:403, p:25, f:33, c:1.3},
  {cat:'حلويات', ar:'آيس كريم', en:'ice cream', kcal:207, p:3.5, f:11, c:24},
  {cat:'أكلات مصرية', ar:'كشري', en:'koshary', kcal:164, p:5, f:3, c:30},
  {cat:'أكلات مصرية', ar:'فول مدمس', en:'foul medames', kcal:110, p:7.6, f:0.4, c:19.7},
  {cat:'مكسرات', ar:'لوز', en:'almonds', kcal:579, p:21, f:50, c:22},
  {cat:'حلويات', ar:'بقلاوة', en:'baklava', kcal:430, p:6, f:27, c:42},
  {cat:'مشروبات', ar:'عصير برتقال', en:'orange juice', kcal:45, p:0.7, f:0.2, c:10.4},
];

// صيغ/طرق تحضير تؤثر قليلًا على الماكروز
const FORMS = [
  {suffix:'مشوي', en:'grilled', pMul:1, fMul:0.95, cMul:1, kcal:+0},
  {suffix:'مقلي', en:'fried', pMul:1, fMul:1.25, cMul:1.05, kcal:+40},
  {suffix:'مسلوق', en:'boiled', pMul:1, fMul:0.9, cMul:1, kcal:-10},
  {suffix:'مشوح', en:'sauteed', pMul:1, fMul:1.15, cMul:1.02, kcal:+25},
  {suffix:'بدون زيت', en:'no oil', pMul:1, fMul:0.85, cMul:1, kcal:-30},
  {suffix:'بالصلصة', en:'with sauce', pMul:1, fMul:1.1, cMul:1.08, kcal:+35},
];

// أحجام تقديرية حسب الفئة
const SERVING_BY_CAT = {
  'لحوم': [
    {label:'100 جم', g:100}, {label:'نصف صدر', g:120}, {label:'حصة (قطعة)', g:150}, {label:'طبق صغير', g:200}, {label:'طبق متوسط', g:300}, {label:'طبق كبير', g:450}
  ],
  'أسماك': [
    {label:'100 جم', g:100}, {label:'شريحة', g:120}, {label:'حصة', g:170}, {label:'طبق صغير', g:220}, {label:'طبق متوسط', g:320}, {label:'طبق كبير', g:450}
  ],
  'بيض وألبان': [
    {label:'100 جم', g:100}, {label:'بيضة', g:50}, {label:'2 بيض', g:100}, {label:'شريحة جبن', g:30}, {label:'كوب لبن', g:240}
  ],
  'حبوب': [
    {label:'100 جم', g:100}, {label:'نصف كوب مطبوخ', g:80}, {label:'كوب مطبوخ', g:160}, {label:'طبق صغير', g:220}, {label:'طبق متوسط', g:320}, {label:'طبق كبير', g:450}
  ],
  'خبز': [
    {label:'100 جم', g:100}, {label:'شريحة', g:30}, {label:'رغيف صغير', g:60}, {label:'رغيف بلدي', g:110}
  ],
  'بقول': [
    {label:'100 جم', g:100}, {label:'نصف كوب', g:90}, {label:'كوب', g:180}, {label:'طبق صغير', g:220}, {label:'طبق متوسط', g:320}
  ],
  'خضار': [
    {label:'100 جم', g:100}, {label:'كوب', g:80}, {label:'طبق سلطة', g:180}, {label:'طبق كبير', g:300}
  ],
  'فواكه': [
    {label:'100 جم', g:100}, {label:'حبة صغيرة', g:120}, {label:'حبة كبيرة', g:180}, {label:'كوب مكعبات', g:150}
  ],
  'دهون': [
    {label:'100 جم', g:100}, {label:'ملعقة كبيرة', g:14}
  ],
  'أجبان': [
    {label:'100 جم', g:100}, {label:'شريحة', g:30}, {label:'مكعبات نصف كوب', g:60}
  ],
  'حلويات': [
    {label:'100 جم', g:100}, {label:'قطعة صغيرة', g:40}, {label:'قطعة متوسطة', g:70}
  ],
  'أكلات مصرية': [
    {label:'100 جم', g:100}, {label:'طبق صغير', g:220}, {label:'طبق متوسط', g:320}, {label:'طبق كبير', g:450}
  ],
  'مشروبات': [
    {label:'100 مل', g:100}, {label:'كوب', g:240}, {label:'عبوة', g:330}
  ],
  'مكسرات': [
    {label:'100 جم', g:100}, {label:'حفنة', g:28}
  ]
};

// توليد قاعدة 1000+ عنصر بالدمج بين BASE و FORMS وإضافة بعض الأسماء
function generateFoods(){
  const out = [];
  let id=1;
  const extras = [
    {cat:'سندويتشات', ar:'ساندويتش دجاج', en:'chicken sandwich', kcal:240, p:18, f:6, c:28},
    {cat:'سلطات', ar:'سلطة تونة', en:'tuna salad', kcal:140, p:12, f:6, c:8},
    {cat:'مشروبات', ar:'قهوة سوداء', en:'black coffee', kcal:2, p:0.3, f:0, c:0.2},
    {cat:'مشروبات', ar:'شاي', en:'tea', kcal:1, p:0, f:0, c:0.2},
    {cat:'حلويات', ar:'قطعة كيك', en:'cake slice', kcal:350, p:5, f:15, c:52},
  ];
  const baseAll = BASE.concat(extras);

  baseAll.forEach(b=>{
    const forms = (b.cat==='خضار' || b.cat==='فواكه' || b.cat==='دهون' || b.cat==='مشروبات') ? [FORMS[2], {suffix:'', en:'', pMul:1,fMul:1,cMul:1,kcal:0}] : FORMS;
    forms.forEach(fm=>{
      const nameAr = fm.suffix? `${b.ar} ${fm.suffix}`: b.ar;
      const nameEn = fm.en? `${b.en} ${fm.en}`: b.en;
      const item = {
        id:id++, cat:b.cat, ar:nameAr, en:nameEn,
        per100: {
          kcal: round(b.kcal + (fm.kcal||0)),
          p: round(b.p*fm.pMul),
          f: round(b.f*fm.fMul),
          c: round(b.c*fm.cMul)
        }
      };
      out.push(item);
    });
  });

  // أضف تنويعات مكونات شائعة لزيادة العدد
  const carbMix = ['أرز', 'مكرونة', 'كسكسي', 'برغل', 'كينوا'];
  const proteinMix = ['دجاج', 'لحم بقري', 'سمك أبيض', 'سالمون', 'تونة'];
  const sauces = ['بصلصة طماطم','بصلصة بيضاء','مع خضار','حار','لايت'];
  carbMix.forEach(ca=>{
    proteinMix.forEach(pr=>{
      sauces.forEach(sc=>{
        const kcal = 140 + (Math.random()*80|0); // تقديري
        const p = 8 + (Math.random()*10|0);
        const f = 3 + (Math.random()*8|0);
        const c = 18 + (Math.random()*25|0);
        out.push({id:id++, cat:'أطباق مركبة', ar:`طبق ${ca} مع ${pr} ${sc}` , en:`${ca} with ${pr} ${sc}` , per100:{kcal,p,f,c}});
      });
    });
  });

  // كرر بعض الفواكه والخضار بأصناف
  const fruits = ['تفاح أحمر','تفاح أخضر','موز','عنب','فراولة','مانجو','برتقال','رومان'];
  fruits.forEach(n=>{ out.push({id:id++, cat:'فواكه', ar:n, en:n, per100:{kcal:60, p:0.6, f:0.3, c:15}}); });

  // إذا العدد أقل من 1000، أنشئ عناصر عامة بفئات مختلفة مع قيم منطقية
  while(out.length < 1000){
    const cats = Object.keys(SERVING_BY_CAT);
    const cat = cats[Math.floor(Math.random()*cats.length)];
    const baseK = { 'لحوم':180, 'أسماك':150, 'بيض وألبان':120, 'حبوب':140, 'خبز':260, 'بقول':150, 'خضار':35, 'فواكه':60, 'دهون':884, 'أجبان':350, 'حلويات':380, 'أكلات مصرية':180, 'مشروبات':45, 'مكسرات':600 }[cat] || 150;
    const p = Math.max(0, round(({'لحوم':26,'أسماك':22,'بيض وألبان':10,'حبوب':5,'خبز':9,'بقول':9,'خضار':2,'فواكه':0.6,'دهون':0,'أجبان':20,'حلويات':5,'أكلات مصرية':6,'مشروبات':0.5,'مكسرات':20}[cat]||6) * (0.85+Math.random()*0.3)) );
    const f = Math.max(0, round(({'لحوم':9,'أسماك':7,'بيض وألبان':7,'حبوب':1.5,'خبز':3,'بقول':3,'خضار':0.4,'فواكه':0.3,'دهون':100,'أجبان':28,'حلويات':15,'أكلات مصرية':4,'مشروبات':0.2,'مكسرات':52}[cat]||5) * (0.85+Math.random()*0.3)) );
    const c = Math.max(0, round(({'لحوم':0,'أسماك':0,'بيض وألبان':1,'حبوب':27,'خبز':48,'بقول':26,'خضار':7,'فواكه':15,'دهون':0,'أجبان':1,'حلويات':50,'أكلات مصرية':28,'مشروبات':10,'مكسرات':20}[cat]||20) * (0.85+Math.random()*0.3)) );
    const kcal = Math.max(1, round(baseK * (0.9+Math.random()*0.2)));
    out.push({id:id++, cat, ar:`عنصر ${cat} ${id}`, en:`${cat} item ${id}`, per100:{kcal,p,f,c}});
  }
  return out;
}

let FOODS = state.FOODS || generateFoods();
state.FOODS = FOODS; save();

/**********************
 * Search (Fuse.js) + Did you mean
 **********************/
let fuse = new Fuse(FOODS, { keys:['ar','en','cat'], threshold:0.38, includeScore:true });
const q = document.getElementById('q');
const resDiv = document.getElementById('results');
const did = document.getElementById('didyou');
const servSel = document.getElementById('serv');
const gramsInp = document.getElementById('grams');
let selectedItem = null;

function renderResults(list){
  if(!list.length){ resDiv.classList.add('hidden'); resDiv.innerHTML=''; return; }
  resDiv.classList.remove('hidden');
  resDiv.innerHTML = list.slice(0,50).map(r=>{
    const f = r.item||r; return `<div class='list-item' data-id='${f.id}'>${f.ar} <span class='small'>(${f.en})</span><br><span class='small'>${f.cat}</span></div>`;
  }).join('');
  resDiv.querySelectorAll('.list-item').forEach(el=>{
    el.onclick = ()=>{ const id = +el.getAttribute('data-id'); pickFood( FOODS.find(x=>x.id===id) ); };
  });
}

function pickFood(item){
  selectedItem = item; q.value = `${item.ar}`; resDiv.classList.add('hidden');
  const sizes = SERVING_BY_CAT[item.cat] || [{label:'100 جم', g:100}];
  servSel.innerHTML = sizes.map((s,i)=>`<option value='${s.g}'>${s.label}</option>`).join('');
  gramsInp.value = sizes[0].g;
  calcPreview();
}

function suggestDidYouMean(txt){
  did.innerHTML = '';
  if(!txt.trim()) return;
  const cand = fuse.search(txt).slice(0,5);
  if(cand.length===0){
    // اقترح أقرب 5 بالعربية والانجليزية
    const more = new Fuse(FOODS, { keys:['ar','en'], threshold:0.6 });
    const m = more.search(txt).slice(0,5);
    if(m.length){
      const title = document.createElement('span'); title.className='small'; title.textContent='هل تقصد:'; did.appendChild(title);
      m.forEach(r=>{ const t=document.createElement('span'); t.className='tag'; t.textContent=r.item.ar; t.onclick=()=>pickFood(r.item); did.appendChild(t); });
    }
    return;
  }
  // لو السكور ضعيف نقترح
  if(cand[0].score>0.25){
    const title = document.createElement('span'); title.className='small'; title.textContent='هل تقصد:'; did.appendChild(title);
    cand.forEach(r=>{ const t=document.createElement('span'); t.className='tag'; t.textContent=r.item.ar; t.onclick=()=>pickFood(r.item); did.appendChild(t); });
  }
}

q.addEventListener('input', ()=>{
  const txt = q.value.toLowerCase();
  if(!txt){ renderResults([]); did.innerHTML=''; return; }
  const hits = fuse.search(txt);
  renderResults(hits);
  suggestDidYouMean(txt);
});

servSel.onchange = ()=>{ gramsInp.value = +servSel.value; calcPreview(); };
gramsInp.oninput = calcPreview;

function calcFromPer100(per100, g){
  const ratio = g/100; return {
    kcal: round(per100.kcal*ratio),
    prot: round(per100.p*ratio),
    fat:  round(per100.f*ratio),
    carb: round(per100.c*ratio)
  };
}

function calcPreview(){
  if(!selectedItem){ document.getElementById('preview').textContent=''; return; }
  const g = +gramsInp.value||0; const v = calcFromPer100(selectedItem.per100, g);
  document.getElementById('preview').innerHTML = `
    <div class='badge'>${selectedItem.ar} — ${g} جم</div>
    <div class='small'>سعرات: <b>${v.kcal}</b> • بروتين: <b>${v.prot}</b> • دهون: <b>${v.fat}</b> • كارب: <b>${v.carb}</b></div>
  `;
}

/**********************
 * Add to Log & Table
 **********************/
const mealSel = document.getElementById('meal');
const tbody = document.getElementById('tbody');

function addRow(m){
  const tr = document.createElement('tr');
  tr.innerHTML = `<td>${m.meal}</td><td>${m.name}</td><td>${m.g}</td><td>${m.kcal}</td><td>${m.prot}</td><td>${m.fat}</td><td>${m.carb}</td><td><button class='danger del'>X</button></td>`;
  tr.querySelector('.del').onclick = ()=>{ const day=getDay(); const i = day.items.indexOf(m); if(i>-1){ day.items.splice(i,1); save(); refreshLog(); refreshHome(); }};
  tbody.appendChild(tr);
}

function refreshLog(){
  document.getElementById('dToday').textContent = todayKey();
  const day = getDay(); tbody.innerHTML='';
  let s = {kcal:0,prot:0,fat:0,carb:0};
  day.items.forEach(m=>{ addRow(m); s.kcal+=m.kcal; s.prot+=m.prot; s.fat+=m.fat; s.carb+=m.carb; });
  document.getElementById('tK').textContent = Math.round(s.kcal);
  document.getElementById('tP').textContent = Math.round(s.prot);
  document.getElementById('tF').textContent = Math.round(s.fat);
  document.getElementById('tC').textContent = Math.round(s.carb);
}

function sumDay(){
  const day = getDay(); return day.items.reduce((a,m)=>{a.kcal+=m.kcal;a.prot+=m.prot;a.fat+=m.fat;a.carb+=m.carb;return a;},{kcal:0,prot:0,fat:0,carb:0});
}

function setRing(id,val,pct){
  const circ = 2*Math.PI*62; const off = Math.max(0, circ - circ*Math.min(1,pct));
  document.getElementById(id).setAttribute('stroke-dasharray', circ);
  document.getElementById(id).setAttribute('stroke-dashoffset', off);
}

function refreshHome(){
  const g = state.goals; const s = sumDay();
  document.getElementById('kcalNum').textContent = Math.round(s.kcal);
  document.getElementById('pNum').textContent = Math.round(s.prot);
  document.getElementById('fNum').textContent = Math.round(s.fat);
  document.getElementById('cNum').textContent = Math.round(s.carb);
  const kPct = g.kcal? s.kcal/g.kcal:0, pPct = g.prot? s.prot/g.prot:0, fPct = g.fat? s.fat/g.fat:0, cPct = g.carb? s.carb/g.carb:0;
  setRing('ringK', s.kcal, kPct); document.getElementById('ringKtxt').textContent = Math.round(kPct*100)+'%';
  setRing('ringP', s.prot, pPct); document.getElementById('ringPtxt').textContent = Math.round(pPct*100)+'%';
  setRing('ringF', s.fat, fPct); document.getElementById('ringFtxt').textContent = Math.round(fPct*100)+'%';
  setRing('ringC', s.carb, cPct); document.getElementById('ringCtxt').textContent = Math.round(cPct*100)+'%';
}

refreshLog(); refreshHome();

document.getElementById('addBtn').onclick = ()=>{
  if(!selectedItem){ alert('اختر أكلة من البحث أولاً'); return; }
  const g = +gramsInp.value||0; if(g<=0){ alert('أدخل الجرامات'); return; }
  const v = calcFromPer100(selectedItem.per100, g);
  const entry = {date:todayKey(), meal:mealSel.value, name:selectedItem.ar, g, ...v};
  const day = getDay(); day.items.push(entry); save(); refreshLog(); refreshHome();
};

document.getElementById('clearToday').onclick = ()=>{ getDay().items = []; save(); refreshLog(); refreshHome(); };

document.getElementById('clearSel').onclick = ()=>{ q.value=''; selectedItem=null; resDiv.classList.add('hidden'); did.innerHTML=''; servSel.innerHTML=''; gramsInp.value=''; document.getElementById('preview').innerHTML=''; };

/**********************
 * Tabs
 **********************/
const tabs = ['home','add','goals','log','about'];
document.querySelector('nav').addEventListener('click', e=>{ if(e.target.tagName!=='BUTTON')return; const id=e.target.dataset.tab; tabs.forEach(t=>document.getElementById(t).classList.add('hidden')); document.getElementById(id).classList.remove('hidden'); if(id==='log'){refreshLog();} if(id==='home'){refreshHome();} if(id==='goals'){refreshGoalsUI();} });
</script>
</body>
</html>
